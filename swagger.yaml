swagger: "2.0"
info:
  description: "RESTful Math-as-a-service - a Klaviyo project"
  version: "1.0.0"
  title: "RESTful Math-as-a-service"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "www.math-as-a-service.com" # TODO: Put wherever we actually run this in.
basePath: "/v1"
tags:
- name: "expression"
  description: "Algebraic expression"
- name: "operand"
  description: "A value used as the operand within an expression"
- name: "operator"
  description: "An operator used within an expression"
- name: "evaluation"
  description: "Begins execution of an expression"
- name: "result"
  description: "Retrieves result of an evaluated expression"
schemes:
- "https"
paths:
  /expression:
    post:
      tags:
      - "expression"
      summary: "Create an empty expression"
      description: "Creates an empty expression"
      operationId: "addExpression"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
  /expression/{expression_id}:
    parameters:
      - name: "expression_id"
        in: "path"
        description: "ID of expression to return"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
      - "expression"
      summary: "Retrieve expression object"
      description: "Retrieve expression object"
      operationId: "getExpression"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
    delete:
      tags:
      - "expression"
      summary: "Delete expression object"
      description: "Delete expression object"
      operationId: "deleteExpression"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
    put:
      tags:
      - "expression"
      summary: "Update expression object"
      description: "Update expression object"
      operationId: "putExpression"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
  /operand:
    post:
      tags:
      - "operand"
      summary: "Create an operand"
      description: "Creates an operand"
      operationId: "addOperand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
  /operand/{operand_id}:
    parameters:
      - name: "operand_id"
        in: "path"
        description: "ID of operand to return"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
      - "operand"
      summary: "Retrieve operand object"
      description: "Retrieve operand object"
      operationId: "getOperand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
    delete:
      tags:
      - "operand"
      summary: "Delete operand object"
      description: "Delete operand object"
      operationId: "deleteOperand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
    put:
      tags:
      - "operand"
      summary: "Update operand object"
      description: "Update operand object"
      operationId: "putOperand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
  /operator:
    post:
      tags:
      - "operator"
      summary: "Create an operator"
      description: "Creates an operator"
      operationId: "addOperator"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
  /operator/{operator_id}:
    parameters:
      - name: "operator_id"
        in: "path"
        description: "ID of operator to return"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
      - "operator"
      summary: "Retrieve operator object"
      description: "Retrieve operator object"
      operationId: "getOperator"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
    delete:
      tags:
      - "operator"
      summary: "Delete operator object"
      description: "Delete operator object"
      operationId: "deleteOperator"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
    put:
      tags:
      - "operator"
      summary: "Update operator object"
      description: "Update operator object"
      operationId: "putOperator"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
  /evaluation:
    post:
      tags:
      - "evaluation"
      summary: "Begin evaluation of an expression"
      description: "Begin evaluation of an expression"
      operationId: "addEvaluation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
  /evaluation/{evaluation_id}:
    parameters:
      - name: "evaluation_id"
        in: "path"
        description: "ID of evaluation to return"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
      - "evaluation"
      summary: "Poll for result of an evaluation"
      description: "Poll for result of an evaluation"
      operationId: "getEvaluation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
  /result:
    get:
      tags:
      - "result"
      summary: "Poll for result of an evaluation"
      description: "Poll for result of an evaluation"
      operationId: "getResult"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        503:
          description: "Service unavailable"
      security:
      - api_key: []
  
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  # TODO: Add these based on Chris' diagram
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
